Advance Topics
Nodejs:
-----------------------------------------------------------------------------------------------------
1Free cource:https://www.scaler.com/topics/course/nodejs/ 
2Evevent loop/event/custom events  
3Npm Helment(For Security):https://blog.logrocket.com/using-helmet-node-js-secure-application/   
							https://blog.logrocket.com/using-helmet-node-js-secure-application/#referrer-policy-header

4:express-validator(fOR vALIDATION) :https://express-validator.github.io/docs/guides/getting-started
5 bcryptjs
6Asyncronous updates on with websocket
7Event Loop and Non-blocking I/O
8 NEST JS:
			https://www.youtube.com/watch?v=GHTA143_b-s
			https://www.youtube.com/watch?v=Mgr5_r70OJQ
9:	child process methods	https://www.youtube.com/watch?v=7cFNTD73N88    ----	https://www.youtube.com/watch?v=bbmFvCbVDqo

10:multithreading-in-node-js:	https://www.digitalocean.com/community/tutorials/how-to-use-multithreading-in-node-js	
11:Streams:https://www.freecodecamp.org/news/node-js-streams-everything-you-need-to-know-c9141306be93/
12:Child process:https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/
12:Child process:https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/
13:worker Threads :https://www.youtube.com/watch?v=OGkOxkSYrUg

Nodejs Course:https://youtube.com/watch?v=5eaBOxXABkU&list=PL1BztTYDF-QPdTvgsjf8HOwO4ZVl_LhxS&index=1 -completed
			  https://www.youtube.com/watch?v=f2EqECiTBL8-completed

Npm Packages:throttledQueue/multer/xml2js/moment/Jimp/schedule/ping /rate limit(for secuity),npm audit

Node js:https://www.youtube.com/watch?v=ohIAiuHMKMI&list=PLinedj3B30sDby4Al-i13hQJGQoRQDfPo
		https://www.youtube.com/watch?v=SxCfcE4AHxQ&list=PL1BztTYDF-QPdTvgsjf8HOwO4ZVl_LhxS&index=23
eXPRESS JS:Express JS Full Course:https://www.youtube.com/watch?v=nH9E25nkk3I
https://www.youtube.com/watch?v=MuwJJrfIfsU&list=PL5Lsd0YA4OMGN86vWiW7O52izu-cTxcS3&index=2 - watch whole cource Advance nODEJS 
https://amplication.com/blog/nodejs-worker-threads-vs-child-processes-which-one-should-you-use


morgan and winston  => logger
Joi ->Schema validation


jAVASCRIPT
-------------------

JS full series : https://www.youtube.com/watch?v=WvTMIKHvPxU&list=PLRAV69dS1uWSxUIk5o3vQY2-_VKsOpXLD&index=57  - done
ts full : https://www.youtube.com/watch?v=j89BvWz8Eag&list=PLRAV69dS1uWRPSfKzwZsIm-Axxq-LxqhW  done

=>Architecture View layer of MVC
=>Data-Binding Uni-directional
=>Rendering Server-Side
( functiobn abc(){ console.log('h1)})()  -it execute aautomatically without calLING
IIFE- Immediately Invoked Function Expression
=>json.parse() - convert json into js object
When you insert data in local storgae set as json.stringify
=>Localstorgae give value as sting so always convort into json.parse
=> We are not use this keyword in arrow function we can create function with function keyword
=>if nothing is assigned - value is “undefined  ex let name
	
Flat
const arr1 = [0, 1, 2, [3, 4]];
console.log(arr1.flat());
const arr2 = [0, 1, 2, [[[3, 4]]]];
console.log(arr2.flat(2));
[0, 1, 2, 3, 4]
[0, 1, 2, [3, 4]

Flatmap
const arr1 = [1, 2, [3], [4, 5], 6, []];
const flattened = arr1.flatMap(num => num);
[1, 2, 3, 4, 5, 6]

Node jS
----------------------------------------------------
npx depcheck ->for find unused npm
Q=>Node js:
node js It is different from other JavaScript environments because it is asynchronous and event-driven.
Google uses V8 for Node.js because it is faster and more efficient. It compiles the JavaScript code directly into machine code.
Node red is a visual programming tool for Node.js that is used to wire hardware devices and online services as part of IoT 
applications.In such cases, the multiple thread options are better but they are sluggish in performance. Moreover, 
if a relational database is used with Node.js, it behaves strangely, preventing favorable outcomes that the users can be sure of. Since Node.js does not support multiple threads, it is better suited for lightweight applications but not large-scale or heavy applications
We use req.connection.remote address to get the IP address.


Q=>Exit code : Exit codes are a collection of specific codes whose function is to complete a specific process.
			   Examples of exit codes are fatal error, unused, internal JavaScript evaluation failure, etc.
			   https://www.geeksforgeeks.org/node-js-exit-codes/

=>Dependencies are present in the package.json file.
There are three layers in the application architecture - API, service, and integration layers.
Two input arguments for asynchronous queue are concurrency value and task function.
It is possible to run external processes with Node.js. This can be done with the help of the child_process module.

Q=>How does Node.js handle concurrency if it is single-threaded?
Node.js prevents bottlenecks and aids programmers in easily writing the code because of the single-thread model. 
Internally, there are several POSIX threads for different I/O operations like File, DNS, etc.
So, when Node receives an I/O request, it uses one of these threads for the I/O operation. Once the operation is complete, 
the result joins the event queue. Because of the event mechanism, the event loop starts after each event, checks the queue, and if Node’s execution stack is free, then the loop adds the queue result to it, thus managing concurrency.
The emit() function is used to fire an event.

=>Error-first callbacks are used to pass data and identify if an error has occurred.

=>Libuv is a library that provides an event loop and a thread pool for handling asynchronous operations seamlessly. 
It helps in handling file systems, child processes, files, DNS, etc.
Punycode is a way of encoding internationalized domain names that use characters outside of the ASCII range.

=>Traditionally on the web, we had a request/response format where a user sends an HTTP request and the server responds to that. 
This is still applicable in most cases, especially those using RESTful API. But a need was felt for the server to also 
communicate with the client, without getting polled(or requested) by the client.
 The server in itself should be able to send information to the client or the browser. 
 This is where Web Socket comes into the picture.


Q=>What is Callback hell? How can you avoid them?(a=>CALL BACK INSIDE CALLBACK)
A problematic phenomenon for a JavaScript developer when he tries to execute multiple asynchronous operations consecutively 
is termed callback hell. An asynchronous function is one that requires some external activity completion before processing a 
result. These asynchronous functions require a callback function to tackle errors and process the result.


Q=>Spawned Child Processes
The spawn function launches a command in a new process and we can use it to pass that command any arguments.
 For example, here’s code to spawn a new process that will execute the pwd command.
 
=>fs.read and fs.write read/write data attime and store buffer and give to us

=>Architecture
	luvb -> thredpool,eventloop->responsible for excute code in asynchronous( where all callback function is waitfor execution)
=>process:one type of task which is excute
=>thread: which is responsible for excute process(node js single thred)

=>Express node js framework
=>param middleware : 	
			Param middleware is middleware that runs only when certain parameters are present in the URL. It enables you to 
			apply specific middleware functions to routes that have particular parameters, making your code more organized and 
			efficient. 
			https://medium.com/@navneetskahlon/using-param-middleware-in-express-simplifying-route-validation-36e939635567#:~:text=Setting%20Up%20Param%20Middleware&text=Define%20Your%20Middleware%20Function%3A%20Create,res%20)%2C%20and%20next%20function.
			router.param('id', checkID);
			we check based on id - like localhost:3000/movie/:id			
			req.query=fetch data from url
			re.body - fetch dat afrom body
	
=>Put vs patch

PUT is a method of modifying resources where the client sends data that updates the entire resource.
PATCH does partial update e.g. Fields that need to be updated by the client, only that field is updated without modifying the other field.

example: if only need to update name then in put you need to send whole request (means all filed which avilable in table) if used put
{name:"dj2",lastname:"45"} 
in patch if u want upadte name then u send only name like {name:"dj2"} no need to send whole object send field which is necessary

Advance concepts
----------------------------
Advance Concept Node js
1. Event Loop and Non-blocking I/O
	What it is: Mechanism allowing Node.js to perform non-blocking I/O despite being single-threaded.
	Components:
		Call Stack: Executes synchronous code.
		Callback Queue: Holds callbacks waiting to be executed after their asynchronous operations complete.
		Event Loop: Checks if call stack is empty, then fetches callbacks from the callback queue.
	Important Functions:
		process.nextTick(): Places callback in a separate queue, which runs before the event loop next cycle.
		setImmediate(): Queues callback to be executed in the next event loop cycle.
		

2. Buffers:
		What they are: Raw memory allocations outside V8’s heap.
		Usage:
			Reading or writing to the file system.
			Handling binary data from network protocols.
			General-purpose binary data manipulations.
		Method:
			Creation: Buffer.alloc(), Buffer.from().
			Access and modify: buf.readUInt8(), buf.writeUInt8().
			Conversion: buf.toString().
3:Streams:  we can process data pice by piece 
			Readable: For data consumption (e.g., fs.createReadStream()).
			Writable: For data production (e.g., fs.createWriteStream()).
			Duplex: Both readable and writable.
			Transform: Can modify the data while reading and writing.
4. Error Handling
			Event Listeners:
			process.on('uncaughtException'): Captures uncaught exceptions.
			process.on('unhandledRejection'): Captures unhandled promise
			Demo
			----------------------
			process.on(‘uncaughtException’, (err) => {
			console.error(‘There was an uncaught error’, err);
			process.exit(1); // Exiting process
			});
			throw new Error(‘This will be caught.’);
5:Clusters
			What they are: A way to utilize multi-core systems.
			Master-Worker Architecture:
			Master: Creates worker processes.
			Worker: Executes app logic.
			Methods:
			cluster.fork(): Spawn a new worker.
			worker.send(): Communicate between master and worker.
			Events: online, exit, disconnect.
			
			Demo
			-------------------
					const cluster = require(‘cluster’);
					const http = require(‘http’);
					const numCPUs = require(‘os’).cpus().length;

					if (cluster.isMaster) {
					for (let i = 0; i < numCPUs; i++) {
					cluster.fork();
					}
					} else {
					http.createServer((req, res) => {
					res.writeHead(200);
					res.end(‘Hello from Cluster!’);
					}).listen(8000);
					}
6:Pomises & Async/Await:
						States: pending, fulfilled, rejected.
						Methods: then(), catch(), finally().
						Creation: new Promise((resolve, reject) => {...}).
						Async/Await:
						Usage: async function() { await someAsyncFunction(); }.
						Error Handling: Use with try...catch for asynchronous errors.
7: ES Modules (ESM) in Node.js => EXPORT/IMPORT Method]

8:Dependency Injection (DI):A pattern where objects receive their dependencies from outside.
								Demo
								--------------------------
								import { Injectable, Inject } from ‘@nestjs/common’;
								@Injectable()
								export class CatsService {
								constructor(@Inject(‘DATABASE_CONNECTION’) private dbConnection) {}

								findAll() {
								return this.dbConnection.query(‘SELECT * FROM cats’);
								}
								}	
	
	

----------------------------
app.set("view engine", "ejs");

The line app.set("view engine", "ejs"); is used in an Express.js application to set up the view engine to 
use EJS (Embedded JavaScript) for rendering HTML templates.

Explanation

EJS (Embedded JavaScript): A templating language that lets you generate HTML markup with plain JavaScript. 
It allows you to embed JavaScript code within your HTML templates.
Purpose
By setting the view engine to EJS, you enable Express to render .ejs files located in your views directory. This makes it easier to dynamically generate HTML pages based on your application data.

Usage
Set Up EJS in Express:

Ensure you have installed EJS:
npm install ejs
Then, in your Express application, set EJS as the view engine:
const express = require('express');
const app = express();

// Set the view engine to EJS
app.set('view engine', 'ejs');
Create an EJS Template:

Create a directory named views in the root of your project. 
Inside the views directory, create an EJS file, for example, index.ejs:

html
Copy code
<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Home Page</title>
</head>
<body>
  <h1>Welcome to <%= title %></h1>
  <p>Hello, <%= user %>!</p>
</body>
</html>
Render the EJS Template in a Route:

Define a route in your Express application that renders the index.ejs template:

javascript
Copy code
app.get('/', (req, res) => {
  res.render('index', { title: 'My Website', user: 'John Doe' });
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
Start the Server:

Run your Express server:

sh
Copy code
node app.js
When you navigate to http://localhost:3000 in your browser, 
you should see the rendered HTML content from index.ejs, with the dynamic values for title and user injected.



Setting the view engine to EJS in an Express.js application allows you to render dynamic HTML pages using EJS templates. 
This enhances your application's ability to generate HTML content dynamically based on the data passed from your server-side code.



	
	
	
	
	
	
	
	
	
	
	
	
	
	
Package with use------------------
Unifaires  Code:


1. @elasticemail/elasticemail-client (^4.0.23)
	Usage: A client for interacting with the Elastic Email API, used for sending emails.
	Example: Sending an email through Elastic Email.

	const ElasticEmail = require('@elasticemail/elasticemail-client');
	const client = new ElasticEmail.Client({ apiKey: 'your-api-key' });
	client.Email.Send({ ... });

2. @joi/date (^2.1.0)
	Usage: An extension for Joi to handle date validations.
	Example: Validating a date.

		const Joi = require('joi').extend(require('@joi/date'));
		const schema = Joi.date().format('YYYY-MM-DD');

3. @sendgrid/mail (^8.1.0)
		Usage: A library for sending emails using the SendGrid API.
		Example: Sending an email through SendGrid.

		const sgMail = require('@sendgrid/mail');
		sgMail.setApiKey('your-sendgrid-api-key');
		const msg = { to: 'recipient@example.com', from: 'sender@example.com', subject: 'Hello', text: 'Hello World' };
		sgMail.send(msg);

4. axios (^1.4.0)
		Usage: A promise-based HTTP client for making requests to APIs.
		Example: Making a GET request.

		const axios = require('axios');
		axios.get('https://api.example.com/data').then(response => console.log(response.data));

5. bcryptjs (^2.4.3)
		Usage: A library for hashing and comparing passwords using bcrypt.
		Example: Hashing a password.

		const bcrypt = require('bcryptjs');
		const hash = bcrypt.hashSync('myPassword', 10);
		
6. cloudinary (^1.36.4)
	Usage: A library for managing images and videos in Cloudinary.
	Example: Uploading an image to Cloudinary.

	const cloudinary = require('cloudinary').v2;
	cloudinary.config({ cloud_name: 'your-cloud-name', api_key: 'your-api-key', api_secret: 'your-api-secret' });
	cloudinary.uploader.upload('path/to/image.jpg');

7. cookie-parser (~1.4.4)
	Usage: A middleware for parsing cookies in an Express application.
	Example: Using the cookie parser middleware.

		const cookieParser = require('cookie-parser');
		app.use(cookieParser());
8. cors (^2.8.5)
	Usage: A middleware to enable Cross-Origin Resource Sharing (CORS) in Express.
	Example: Enabling CORS for all routes.

	const cors = require('cors');
	app.use(cors());

9. dayjs (^1.11.11)

	Usage: A lightweight library for working with dates and times.
	Example: Formatting a date.

	const dayjs = require('dayjs');
	console.log(dayjs().format('YYYY-MM-DD'));
10. debug (~2.6.9)
	Usage: A small debugging utility that outputs logs to the console.
	Example: Creating a debug instance.

	const debug = require('debug')('app');
	debug('This is a debug message');

11. dotenv (^16.0.1)
	Usage: A library for loading environment variables from a .env file.
	Example: Loading environment variables.

	require('dotenv').config();
	console.log(process.env.MY_ENV_VAR);

12. ejs (^3.1.9)
	Usage: A templating engine for generating HTML markup with plain JavaScript.
	Example: Rendering a template with data.

	app.set('view engine', 'ejs');
	app.get('/', (req, res) => res.render('index', { title: 'EJS Example' }));

13. express (^4.18.2)
	Usage: A web framework for building web applications and APIs.
	Example: Creating a basic Express server.

	const express = require('express');
	const app = express();
	app.get('/', (req, res) => res.send('Hello World'));
	app.listen(3000);

14. flutterwave-node-v3 (^1.1.7)
	Usage: A library for integrating with the Flutterwave payment gateway.
	Example: Initiating a payment.

	const Flutterwave = require('flutterwave-node-v3');
	const flw = new Flutterwave('your-public-key', 'your-secret-key');
	flw.Charge.card({ ... });

15. geoip-lite (^1.4.9)
	Usage: A library for looking up IP addresses to determine geographical location.
	Example: Getting the location of an IP address.

	const geoip = require('geoip-lite');
	const geo = geoip.lookup('207.97.227.239');
	console.log(geo);

16. http-errors (~1.6.3)
	Usage: A utility for creating HTTP errors with status codes.
	Example: Creating a 404 error.

	const createError = require('http-errors');
	app.use((req, res, next) => next(createError(404, 'Not Found')));

17. joi (^17.6.0)
	Usage: A library for data validation.
	Example: Validating an object.

	const Joi = require('joi');
	const schema = Joi.object({ username: Joi.string().required() });
	const result = schema.validate({ username: 'user123' });

18. jsonwebtoken (^9.0.0)
	Usage: A library for creating and verifying JSON Web Tokens (JWT).
	Example: Signing a token.

	const jwt = require('jsonwebtoken');
	const token = jwt.sign({ userId: 1 }, 'your-secret-key');

19. linkedin-jobs-api (^1.0.0)
	Usage: A wrapper for LinkedIn Jobs API to search for jobs on LinkedIn.
	Example: Searching for jobs.

	const linkedinJobs = require('linkedin-jobs-api');
	linkedinJobs.searchJobs({ query: 'software engineer', location: 'San Francisco' });

20. morgan (~1.9.1)
	Usage: A middleware for logging HTTP requests in an Express application.
	Example: Setting up request logging.

	const morgan = require('morgan');
	app.use(morgan('combined'));

21. multer (^1.4.5-lts.1)
	Usage: A middleware for handling file uploads in an Express application.
	Example: Setting up file upload handling.

	const multer = require('multer');
	const upload = multer({ dest: 'uploads/' });
	app.post('/upload', upload.single('file'), (req, res) => res.send('File uploaded'));
	
22. mysql2 (^2.3.3)
	Usage: A MySQL client for Node.js with improved performance and features.
	Example: Connecting to a MySQL database.

	const mysql = require('mysql2');
	const connection = mysql.createConnection({ host: 'localhost', user: 'root', database: 'test' });
	connection.query('SELECT * FROM users', (err, results) => console.log(results));

23. n-digit-token (^2.2.0)
	Usage: A library for generating n-digit numeric tokens.
	Example: Generating a 6-digit token.

	const tokenGenerator = require('n-digit-token');
	const token = tokenGenerator(6);
	console.log(token); // Example output: 123456

24. node-cron (^3.0.3)
	Usage: A task scheduling library for running cron jobs in Node.js.
	Example: Scheduling a job to run every minute.

	const cron = require('node-cron');
	cron.schedule('* * * * *', () => console.log('Running a task every minute'));

25. node-fetch (^2.0.0)
	Usage: A lightweight module that brings window.fetch to Node.js.
	Example: Making a fetch request.

	const fetch = require('node-fetch');
	fetch('https://api.example.com/data').then(response => response.json()).then(data => console.log(data));

26. nodemailer (^6.9.13)
	Usage: A module for sending emails using Node.js.
	Example: Sending an email.

	const nodemailer = require('nodemailer');
	const transporter = nodemailer.createTransport({ service: 'gmail', auth: { user: 'your-email@gmail.com', pass: 'your-password' } });
	transporter.sendMail({ from: 'your-email@gmail.com', to: 'recipient@example.com', subject: 'Hello', text: 'Hello World' });

27. nodemon (^2.0.22)
	Usage: A tool that automatically restarts your Node.js application when files change.
	Example: Running a server with nodemon.
	bash
	Copy code
	nodemon server.js

28. request-ip (^3.3.0)
	Usage: A middleware to retrieve a user's IP address in an Express application.
	Example: Getting the IP address from a request.

	const requestIp = require('request-ip');
	app.use(requestIp.mw());
	app.use((req, res) => res.send(req.clientIp));

29. sequelize (^6.21.3)
	Usage: An ORM for Node.js that supports MySQL, PostgreSQL, SQLite, and more.
	Example: Defining a model and querying data.

	const { Sequelize, Model, DataTypes } = require('sequelize');
	const sequelize = new Sequelize('sqlite::memory:');
	class User extends Model {}
	User.init({ username: DataTypes.STRING }, { sequelize, modelName: 'user' });
	await User.create({ username: 'JohnDoe' });

30. sequelize-hierarchy-next (^1.0.0)
	Usage: An extension for Sequelize to handle hierarchical data structures.
	Example: Creating a hierarchical relationship.

	const { Model } = require('sequelize-hierarchy-next')(sequelize);

31. sha1 (^1.1.1)
	Usage: A library for generating SHA-1 hashes.
	Example: Generating a SHA-1 hash.

	const sha1 = require('sha1');
	console.log(sha1('message'));

32. slugify (^1.6.6)
	Usage: A library to create URL-friendly slugs from strings.
	Example: Generating a slug from a string.

	const slugify = require('slugify');
	const slug = slugify('Hello World!', { lower: true });
	console.log(slug); // Outputs: hello-world

33. socket.io (^4.7.5)
	Usage: A library for real-time web socket communication.
	Example: Setting up a basic Socket.io server.

	const { Server } = require('socket.io');
	const io = new Server(3000);
	io.on('connection', (socket) => console.log('a user connected'));

34. stripe (^12.5.0)
	Usage: A library for integrating Stripe payment processing.
	Example: Creating a payment intent.

	const stripe = require('stripe')('your-stripe-secret-key');
	const paymentIntent = await stripe.paymentIntents.create({ amount: 1000, currency: 'usd' }
	
	sharp:

A high-performance image processing library.
js
Copy code
const sharp = require('sharp');

sharp('input.jpg')
  .resize(200, 200)
  .toFile('output.jpg', (err, info) => {
    if (err) throw err;
    console.log(info);
  });
  
 ------------------------------------------------------------------------------	 

Sequelize  Method
Basic Retrieval
findOne: Finds a single entry that matches the query options.
findByPk: Finds a single entry by its primary key.
findAll: Finds all entries that match the query options.
findOrCreate: Finds or creates an entry. If the entry does not exist, it will be created.
findAndCountAll: Finds all entries and counts the total number of matching records.
findAndCount: Similar to findAndCountAll but more flexible.
findAndCountByPk: Finds a single entry by its primary key and counts total number of matching records.
Advanced Retrieval
aggregate: Runs an aggregation function (e.g., sum, avg) over specified attributes.
count: Counts the number of matching records.
max: Returns the maximum value of a specified attribute.
min: Returns the minimum value of a specified attribute.
sum: Returns the sum of a specified attribute.
Bulk Retrieval
findAll: Finds all entries that match the query options.
findAndCountAll: Finds all entries and counts the total number of matching records.
findOrCreate: Finds or creates an entry. If the entry does not exist, it will be created.
findCreateFind: Tries to find an existing entry and create it if not found.
Insertion Methods
create: Creates a new entry in the database.
bulkCreate: Creates multiple entries in the database in bulk.
Update Methods
update: Updates multiple entries in the database that match the query options.
increment: Increments the value of one or more attributes.
decrement: Decrements the value of one or more attributes.
Deletion Methods
destroy: Deletes multiple entries in the database that match the query options.
truncate: Truncates the table, deleting all entries.
Instance Methods
Instance methods operate on instances (records) of the model.

save: Saves an instance to the database (either inserting or updating).
destroy: Deletes an instance from the database.
reload: Reloads an instance from the database.
update: Updates an instance with new values.
increment: Increments the value of one or more attributes of an instance.
decrement: Decrements the value of one or more attributes of an instance.
Association Methods
Association methods are used to manage relationships between models.

belongsTo: Defines a many-to-one relationship.
hasOne: Defines a one-to-one relationship.
hasMany: Defines a one-to-many relationship.
belongsToMany: Defines a many-to-many relationship.
Miscellaneous Methods
sync: Syncs the model with the database, creating the table if it doesn’t exist.
drop: Drops the table associated with the model.
describe: Describes the table structure.
scope: Applies predefined scopes to queries.
unscoped: Removes applied scopes from queries.
Transaction Methods
Sequelize also provides methods to manage transactions.

transaction: Starts a new transaction.
commit: Commits the transaction.
rollback: Rolls back the transaction.
Hook Methods
Hooks (also known as lifecycle events) allow you to execute custom logic at various points in the model lifecycle.

beforeCreate: Triggered before an instance is created.
afterCreate: Triggered after an instance is created.
beforeUpdate: Triggered before an instance is updated.
afterUpdate: Triggered after an instance is updated.
beforeDestroy: Triggered before an instance is destroyed.
afterDestroy: Triggered after an instance is destroyed.
beforeBulkCreate: Triggered before multiple instances are created in bulk.
afterBulkCreate: Triggered after multiple instances are created in bulk.
beforeBulkUpdate: Triggered before multiple instances are updated in bulk.
afterBulkUpdate: Triggered after multiple instances are updated in bulk.
beforeBulkDestroy: Triggered before multiple instances are destroyed in bulk.
afterBulkDestroy: Triggered after multiple instances are destroyed in bulk.

	
	const { Sequelize } = require('sequelize');

const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: './database.sqlite',
  logging: false,
});

module.exports = sequelize;




const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/database');

class User extends Model {
  static associate(models) {
    this.hasMany(models.Post, { foreignKey: 'userId', as: 'posts' });
  }
}

User.init({
  username: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
  },
}, {
  sequelize,
  modelName: 'User',
});

module.exports = User;

const { Model, DataTypes } = require('sequelize');
const sequelize = require('../config/database');

class Post extends Model {
  static associate(models) {
    this.belongsTo(models.User, { foreignKey: 'userId', as: 'user' });
  }
}

Post.init({
  title: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  content: {
    type: DataTypes.TEXT,
    allowNull: false,
  },
}, {
  sequelize,
  modelName: 'Post',
});

module.exports = Post;




const sequelize = require('../config/database');
const User = require('./User');
const Post = require('./Post');

const models = {
  User,
  Post,
};

Object.keys(models).forEach(modelName => {
  if (models[modelName].associate) {
    models[modelName].associate(models);
  }
});

models.sequelize = sequelize;
models.Sequelize = Sequelize;

module.exports = models;

const { Sequelize } = require('sequelize');
const models = require('./models');

async function main() {
  await models.sequelize.sync({ force: true }); // Sync database

  // Create a user
  const user = await models.User.create({ username: 'john_doe', email: 'john.doe@example.com' });
  console.log('User created:', user.toJSON());

  // Create a post
  const post = await models.Post.create({ title: 'First Post', content: 'This is the first post.', userId: user.id });
  console.log('Post created:', post.toJSON());

  // Find one user
  const foundUser = await models.User.findOne({ where: { username: 'john_doe' } });
  console.log('User found:', foundUser ? foundUser.toJSON() : 'User not found');

  // Find user by primary key
  const userByPk = await models.User.findByPk(user.id);
  console.log('User found by primary key:', userByPk ? userByPk.toJSON() : 'User not found');

  // Find all users
  const users = await models.User.findAll();
  console.log('All users:', users.map(u => u.toJSON()));

  // Count users
  const userCount = await models.User.count();
  console.log('Number of users:', userCount);

  // Update a user
  const [affectedRows] = await models.User.update({ email: 'john.new@example.com' }, { where: { username: 'john_doe' } });
  console.log(`Number of rows updated: ${affectedRows}`);

  // Find or create a user
  const [newUser, created] = await models.User.findOrCreate({
    where: { username: 'jane_doe' },
    defaults: { email: 'jane.doe@example.com' },
  });
  console.log('User find or created:', newUser.toJSON(), 'Created:', created);

  // Increment user's email
  await user.increment('age', { by: 1 });
  console.log('User age incremented:', (await user.reload()).toJSON());

  // Destroy a user
  const rowsDeleted = await models.User.destroy({ where: { username: 'john_doe' } });
  console.log(`Number of rows deleted: ${rowsDeleted}`);

  // Find user and associated posts
  const userWithPosts = await models.User.findOne({
    where: { username: 'jane_doe' },
    include: { model: models.Post, as: 'posts' },
  });
  console.log('User with posts:', userWithPosts ? userWithPosts.toJSON() : 'User not found');

  await models.sequelize.close(); // Close connection
}

main().catch(err => {
  console.error('Error occurred:', err);
});


Relationship

This code defines the relationships between three models in an ORM (Object-Relational Mapping) setup, likely using Sequelize, a popular ORM for Node.js. Here’s a breakdown of each part:

Models
Help: This model represents a help request or ticket.
HelpTrack: This model tracks changes or assignments related to a help request.
User: This model represents a user in the system.
Associations
Help.hasMany(HelpTrack, { foreignKey: { allowNull: false } }):

Association: This sets up a one-to-many relationship between Help and HelpTrack.
Details: One Help can have many HelpTrack entries. The foreignKey constraint ensures that the foreign key in HelpTrack referring to Help cannot be null, meaning every HelpTrack must be associated with a Help.
HelpTrack.belongsTo(Help):

Association: This sets up a many-to-one relationship from HelpTrack back to Help.
Details: Each HelpTrack entry belongs to a single Help. This is the inverse of the previous association.
HelpTrack.belongsTo(User, { foreignKey: "assignToId", as: "assignToUser" }):

Association: This sets up a many-to-one relationship from HelpTrack to User.
Details: Each HelpTrack entry is assigned to a user, identified by the foreign key assignToId. The association is given an alias assignToUser for easier reference in queries.
HelpTrack.belongsTo(User, { foreignKey: "assignById", as: "assignByUser" }):

Association: This sets up another many-to-one relationship from HelpTrack to User.
Details: Each HelpTrack entry is assigned by a user, identified by the foreign key assignById. The association is given an alias assignByUser for easier reference in queries.
Summary
A Help can have multiple HelpTrack entries.
Each HelpTrack entry is associated with a single Help.
Each HelpTrack entry is assigned to a user (assignToUser).
Each HelpTrack entry is assigned by a user (assignByUser).

1. .belongsTo()
Defines a many-to-one relationship. The model on which you call this method has a foreign key that references the primary key of another model.

2. .hasOne()
Defines a one-to-one relationship. The model on which you call this method has a foreign key that references the primary key of another model. This is the inverse of .belongsTo().

3. .hasMany()
Defines a one-to-many relationship. The model on which you call this method has multiple records in the associated model.

4. .belongsToMany()
Defines a many-to-many relationship through a junction table (or join table). Both models will have foreign keys that reference each other.

Methods Breakdown
.belongsTo(targetModel, options)
targetModel: The model that this model belongs to.
options: Options to customize the association (e.g., foreignKey, as, constraints).
.hasOne(targetModel, options)
targetModel: The model that this model has one instance of.
options: Options to customize the association.
.hasMany(targetModel, options)
targetModel: The model that this model has many instances of.
options: Options to customize the association.
.belongsToMany(targetModel, options)
targetModel: The model that this model belongs to many instances of, and vice versa.
options: Options to customize the association, including specifying the through model.





