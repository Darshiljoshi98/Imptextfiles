Advanced Concepts:
------------------------
Mongodb
prisma:https://www.youtube.com/watch?v=IiqhMNPWGEs&list=PLRAV69dS1uWTuDGJBa7UdqX_pxoEXy00p&pp=iAQB
https://www.youtube.com/watch?v=DZBGEVgL2eE



RoadMap
------------------------------------------------------
Certainly! Here's a list of beginner to advanced concepts in MongoDB:

### Beginner Level:
1. **Introduction to MongoDB**:
   - Understanding NoSQL databases and MongoDB's role.
   - Installation and setup of MongoDB.

2. **Basic CRUD Operations**:
   - Creating, reading, updating, and deleting documents.
   - Using `insert`, `find`, `update`, and `remove` operations.

3. **Data Modeling**:
   - Document-oriented data modeling concepts.
   - Designing schemas for MongoDB collections.

4. **Indexes**:
   - Introduction to indexes in MongoDB.
   - Creating and managing indexes for efficient querying.

5. **Aggregation Framework**:
   - Performing aggregation operations on MongoDB data.
   - Using stages like `$match`, `$group`, `$project`, etc.

### Intermediate Level:
6. **Query Optimization**:
   - Techniques for optimizing MongoDB queries.
   - Analyzing query performance and using explain plans.

7. **Schema Design Patterns**:
   - Understanding common schema design patterns in MongoDB.
   - Embedding vs. referencing documents.

8. **Transactions**:
   - Introduction to transactions in MongoDB.
   - Using multi-document transactions for atomic operations.

9. **Replication**:
   - Setting up replication in MongoDB for high availability.
   - Understanding replica sets and their configurations.

10. **Sharding**:
    - Scaling MongoDB horizontally using sharding.
    - Shard key selection and distribution of data across shards.

### Advanced Level:
11. **Security**:
    - Authentication and authorization in MongoDB.
    - Configuring users and roles with appropriate permissions.

12. **Geospatial Queries**:
    - Performing geospatial queries in MongoDB.
    - Indexing geospatial data for efficient querying.

13. **Change Streams**:
    - Monitoring changes in MongoDB collections in real-time.
    - Using change streams for reactive applications.

14. **Full-Text Search**:
    - Implementing full-text search capabilities in MongoDB.
    - Configuring text indexes and executing text search queries.

15. **Data Encryption**:
    - Encrypting data at rest and in transit in MongoDB.
    - Implementing encryption using MongoDB encryption options.

### Expert Level:
16. **Performance Tuning**:
    - Advanced techniques for optimizing MongoDB performance.
    - Fine-tuning configuration parameters for specific workloads.

17. **Data Partitioning**:
    - Advanced strategies for partitioning data in MongoDB.
    - Using zone sharding and custom shard keys.

18. **MongoDB Atlas**:
    - Deep dive into MongoDB's cloud database service.
    - Managing clusters, backups, and performance tuning in MongoDB Atlas.

19. **Backup and Restore Strategies**:
    - Implementing robust backup and restore strategies for MongoDB.
    - Automating backup processes and ensuring data integrity.

20. **Advanced Aggregation Pipelines**:
    - Leveraging the full power of MongoDB's aggregation framework.
    - Writing complex aggregation pipelines for analytics and reporting.



mongo
FIND OUE  -RETURN OBJECT and FIND MNAY RETURN ArrAY





MongoDb:
-----------------------------------------------------------------------------------------------------
https://www.techtarget.com/searchdatamanagement/definition/MongoDB ->aggrigation
index - mongo db
https://www.youtube.com/watch?v=4EjKroJCpFA&list=PLA3GkZPtsafZydhN4nP0h7hw7PQuLsBv1 - full seiesd - 23 video start
https://www.youtube.com/watch?v=8eJJe4Slnik - simpli learn seriesd
https://www.youtube.com/watch?v=9JSG7Na2S4M&list=PLRAV69dS1uWTaoxyeBbKpAEF90i4ijUQZ  - mongo db hitesh
https://www.youtube.com/watch?v=s44QWegr2l8&list=PLWkguCWKqN9OwcbdYm4nUIXnA2IoXX0LI - Aggrigation
=>Gridfs chaunk collection - need to learn
-it use to store larger collection because collection limit is 16 mb so use to store image/video filess
index
caaped collection
authentication
map/reduce in mongodb
coverd query
atomic in mongodb

Genral Terms
-----------------------------------
Database  -Database
Table -    collection
Row -      Documents(Store BSON)
$means reserve keyword for mongoDb
#Default DataBase Of MongoDb

admin
local
config

Q=>Mongo Shell?
It is a JavaScript shell that allows interaction with a MongoDB instance from the command line. 
With that one can perform administrative functions, inspecting an instance, or exploring MongoDB. 


Q=>features of MongoDB?
			Indexing: It supports generic secondary indexes and provides unique, compound, geospatial, and full-text indexing capabilities as well.
			Aggregation: It provides an aggregation framework based on the concept of data processing pipelines.
			Special collection and index types: It supports time-to-live (TTL) collections for data that should expire at a certain time
			File storage: It supports an easy-to-use protocol for storing large files and file metadata.
			Sharding: Sharding is the process of splitting data up across machines.
						Sharding in MongoDB is a strategy used to distribute data horizontally across numerous servers or clusters, 
						efficiently managing extensive datasets and heavy workloads. In this approach, data is divided into distinct 
						subsets known as shards, and MongoDB's query router directs queries to the relevant shard as needed

You can back up a MongoDB database using tools like `mongodump` or by configuring regular snapshots at the file system or cluster level.

Basic Command
--------------
# Create a Database:
use mydatabase

# Insert a Document:
db.mycollection.insertOne({ name: "John", age: 30, city: "New York" })

# Find Documents: Find return cursor which helps to retrive data from array
# Find all documents in a collection:
db.mycollection.find()
db.mycollection.find().toArray()

# Find documents with a specific condition:
db.mycollection.find({ age: 30 })

You can use findOne() to retrieve the document for a specific user, for example, This not return cursor so we not implment function like count
 db.users.findOne(
  { name: "Bob" }  // Filter: Retrieve the document for Bob
)


#Projection
In MongoDB, projection is a way to control which fields are included or excluded from the result set when querying documents from a collection. 
				It allows you to shape the output of a query by specifying which fields should be returned or excluded.
JSON
{ "_id": 1, "name": "Alice", "age": 25, "city": "Wonderland" }
{ "_id": 2, "name": "Bob", "age": 30, "city": "Dreamland" }
{ "_id": 3, "name": "Charlie", "age": 22, "city": "Fantasyville" }

// Only include the name and age fields
db.users.find({}, { name: 1, age: 1, _id: 0 })

rESULT
{ "name": "Alice", "age": 25 }
{ "name": "Bob", "age": 30 }
{ "name": "Charlie", "age": 22 }

// Exclude the age field
db.users.find({}, { age: 0 })


result
{ "_id": 1, "name": "Alice", "city": "Wonderland" }
{ "_id": 2, "name": "Bob", "city": "Dreamland" }
{ "_id": 3, "name": "Charlie", "city": "Fantasyville" }

nESTED Document


{
  "_id": 1,
  "name": "Alice",
  "department": {
    "name": "Engineering",
    "location": "Office A",
    "team": [
      {
        "role": "Developer",
        "experience": 3
      },
      {
        "role": "Designer",
        "experience": 2
      }
    ]
  }
}



db.employees.find(
  { "department.name": "Engineering" },   // Filter
  { "department.team.name": 1, "department.team.role": 1, _id: 0 }  // Projection
)


db.users.find({}, { "department.team.0.name": 1, "department.team.0.role": 1, _id: 0 })

{
  "_id": 1,
  "name": "Alice",
  "department": {
    "team": [
      { "name": "John", "role": "Developer" },
      { "name": "Emma", "role": "Designer" }
    ]
  }
}



# Update a Document:

Certainly! The updateOne() and updateMany() methods are used in MongoDB to update documents in a collection. Below are examples of both methods:

1. updateOne()
The updateOne() method updates a single document that matches the specified filter criteria.
db.mycollection.updateOne({ name: "John" }, { $set: { age: 31 } })


The updateMany() method updates all documents that match the specified filter criteria.

db.users.updateMany(
  { age: { $lt: 30 } },  // Filter: Users under 30
  { $inc: { age: 1 } }    // Update: Increment age by 1
)	


db.users.replaceOne(
  { name: "Bob" },   // Filter: Replace the document for Bob
  { name: "Bobby", age: 31, city: "New Dreamland" }  // Replacement document
)


Choosing between updateOne() and replaceOne()
Use updateOne() when you want to modify specific fields within a document, leaving other fields intact. It's suitable for making incremental updates.

Use replaceOne() when you want to completely replace a document with a new one. This is suitable when you need to update the entire document or 
when you want to ensure that the document has a specific structure.



# Delete a Document:
db.mycollection.deleteOne({ name: "John" })

Certainly! The deleteMany() method in MongoDB is used to delete multiple documents that match the specified filter criteria. Here's an example:
Certainly! The deleteMany() method in MongoDB is used to delete multiple documents that match the specified filter criteria. Here's an example:.
db.users.deleteMany(
  { age: { $lt: 30 } }  // Filter: Users with age less than 30
)


#Find nested documents
{
  "_id": 1,
  "name": "Alice",
  "department": {
    "name": "Engineering",
    "location": "Office A",
    "team": [
      {
        "role": "Developer",
        "experience": 3
      },
      {
        "role": "Designer",
        "experience": 2
      }
    ]
  }
}
let result = db.employees.find({ "department.team.role": "Developer" })

# Create an Index:
db.mycollection.createIndex({ name: 1 })

# Aggregation:
# Group documents and calculate the average age:
db.mycollection.aggregate([
  { $group: { _id: null, avgAge: { $avg: "$age" } } }
])

# Text Search:
# Create a text index:
db.mycollection.createIndex({ name: "text" })

# Search for documents containing a specific word:
db.mycollection.find({ $text: { $search: "John" } })

# Import/Export Data:
# Import data from a JSON file:
mongoimport --db mydatabase --collection mycollection --file data.json

# Export data to a JSON file:
mongoexport --db mydatabase --collection mycollection --out data.json
https://blog.e-zest.com/basic-commands-for-mongodb


#or opertor

db.products.find({
  $or: [
    { category: "Electronics" },
    { price: { $gt: 1000 } }
  ]
})
his query will retrieve all documents from the products collection where the category is "Electronics" or the price is greater than $1000.


Populate:

Need of Population: Whenever in the schema of one collection we provide a reference (in any field) to a document from any other collection, 
we need a populate() method to fill the field with that document.


const userSchema = new mongoose.Schema({
    username: String,
    email: String
})
 
const postSchema = new mongoose.Schema({
    title: String,
    postedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    }
})
 
// Creating models from userSchema and postSchema
const User = mongoose.model('User', userSchema);
const Post = mongoose.model('Post', postSchema);
 
// Query to find and show all the posts
Post.find()
    .then(p => console.log(p))
    .catch(error => console.log(error));


	Aggrigation
		[
		{} -pipelines it's result is data for second pipeline
 		{} -pipelines fetch data from first pipleline
		]
		
		plipleline seprate by comma

 -pipelines https://www.youtube.com/watch?v=tQ-AWUR49AQ&list=PLRAV69dS1uWQ6CZCehxKy0rjkqhQ2Z88t&index=7   -refer For pipline 
 
 
 https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/
 
 
 
 q1-fetch user  which have active
 [
		{
		//is active is field name
		$match:{isActive:true}
		
		} 
 		
		]
q2- fecth which have active and need count
 [
		{
		//is active is field name
		$match:{isActive:true}
		
		},
		{
		//acrTIVE USER IS DISPLAY NAME WHICH RETURN BY  MONGO DB
		$count:'active user'
		}		
 		
		]
Q3 AVRAGE AGE OF ALL USER
first  group by gender
 [
		{
		//is active is field name
		$group{
		_id:"$gender",
		
		}
		
		}		
 		
		]
main answer group by gender
		 [
		 {
		$group{
		_id:"$gender",
		avrageAge:{
		$avg:"$avg"
		}
		
		
		}}
		
		]
		
grop by all gender

//grup first is id,second is condition or accumulator
//avrage age is variable name and $avg is defult function and "$avg' is filed name
		 [
		 {
				$group{
				_id:null,
				avrageAge:{
				$avg:"$avg"
				}
				
				
				}
		}
		
		]
		
	q3- list top 5 comman fruit among user
 findout count of each fruit like banana - 5 mango -2
	 [
		 {
		$group{
		_id:"$favfruite",
		count:{
		$sum:1
		}
		
		
		}
		}
		
		]
do sorting
//-1 give hifghest value first
//1 give lowest value first
 [
		
	{
		$group{
		_id:null,
		avrageAge:{
		$avg:"$avg"
		}
		
		
		}
	},
	{
	$sort:{
count: -1 
	}
	}
	
		
		]

main answer
// give answer top 2 fav fruit linke banana-15 peole loved mango -6 people love
 [
		
	{
		$group{
		_id:null,
		avrageAge:{
		$avg:"$avg"
		}
		
		
		}
	},
	{
	$sort:{
count: -1 
	}
	},
	{
	$limit:2
	
	}
	
		
		]


q4find total no of male and female

// sum is adding value when it matcgh condition
like gender have 2 value male/female if he find male in every document it's increse by 1

like {dj},{dj2} it gives count 2 
[
	 {
		$group{
		_id:"$gender",
		gendercount:{
		$sum:1
		}
		
		
		}
	}
	]
	
q5 which country have highest register user
//country is inide comnpny->locatiomn->country
object inside object
[
{
$group{
_id:"$compny.location.country",
countryusercount:{
$sum:1
}

},
{
$sort{
countryusercount: -1
},{
$limit:5
}
}

}
]

q6 avg number  of tag par user
tag is array
unwind is used  for wrap up all element inside array

ex {dj,tag["aaa","bbb']}
unwind create
{dj,tags:id",name:"aaa"},
{dj,tags:id",name:"bbb"}

[
{
$unwind:path:"$tags"
}
]

[
{
$unwind:path:"$tags"
},{

$group:{
_id:"$_id",
nooftages:{$sum:1}
},
{

$group:{
_id:null,
avgnooftag:{$avg:"$nooftages"}
}
}
}
]



other way

[
$addFields:{
nooftags:{
$size:{$ifNull:["$tags",[] ]}
}
},

{
$group:{
_id:null,
avgnooftag:{$avg:"$nooftags"}
}

}

]


q-how many user enimn as tag

[
{
$match:{
tags:"enim"
}
},
{
$count:'userwithenimtag'
}

]

q-names & age of user who inactive and velit tag

project pass document with requested fields to next stage

[
{
	$match:{
	isActive:fasle,tags:"velit"
	}
},

{
Sproject:{
name:1,
age:1
}

}


]


q- phone starting with '+1(940)

[

{$match:{"company.phone":/^\+1\(940\)/},
{$count:'usercount}

]



q who register most recent
/-1 latest register
[

{$sort:{registered:-1},
{$limit:4},
{$project:{name:1,registered:1,favfruit:1}}

]


q categorize by fav food

push -  append specific value in array
it create array name users and push name field

[
{$group:{_id:"$favfruit",users:{$push : '$name'}


]


q- how many user havwe 'ad' as the second tag in list of tag
"tages.1": "ads"  ->it return which have value ads in 1 position

[

{$match:{"tages.1": "ads" },
{$count:'secondTagAd'}

]



q find user who have 'enim' and  'id' as tag

$all - select adocument where value filed is array which contain  specific element
[

{$match:{tags: {$all:["enim","id"]} }


]



q list all compny located in usa with coorresponding user count

if we need count only for usa then

[
{$match:{"compny.location.country":"usa"}
{$group:{_id:null,userCount:{$sum:1}}
]


but we need spacific comnpany inside usa
and with count

[
{$match:{"compny.location.country":"usa"}
{$group:{_id:"$company.title",userCount:{$sum:1}}
]


conditional

if condition match set falg as 1

const getCategories = async(req, res) => {
    const data = await Product.aggregate([
      {$unwind: "$category"},
      {$group: {_id: "$category", quantity: {$sum: {
          $cond: [ {$eq: ["$status", "present"]}, 1, 0]
       }}}}
    ])

}



lookup: one type of left JOIN

COLLECTION

book

title: " grat gatsby"
author_id:100
genre:"classic"

authors

_id:100
nme:"f.scott"
birthyear:1986



$lookup:{

from:collection
localfield:field
foreignfield:field
as:result

}

$first : it scan array and return first value
addFields: add new filed in collection



in books
[
{
$lookup:{
from:"authors",
localfield:"author_id"
foreignfield:"_id",
as:"author_details"
}

},
]

IT RETURN  author_details AS ARRAY

return 
title:""
author_id
genre:
author_details:array ->id:1,title:"great","id:160


SO TO RETURN Object

[
{
$lookup:{from:"authors",localfield:"author_id"foreignfield:"_id",as:"author_details"},

$addFields:{author_details:{ $first:"$author_details  } }

]
-return as object


onther way 
$arrayelemtAt	

[
{
$lookup:{from:"authors",localfield:"author_id"foreignfield:"_id",as:"author_details"},

$addFields:{author_details:{ $arrayEleAt:["$author_details",0]  } }

]




=>How to Optimize Performance in MongoDB Aggregation
			One of the best features of the MongoDB aggregation pipeline is that it automatically reshapes the query to improve its performance. 
			Having said that, here are a few things to consider for optimized query performance.

							=>Pipeline stages have a limit of 100 megabytes of RAM. If a stage exceeds this limit, MongoDB will produce an error. 
							To allow for the handling of large datasets, use the allowDiskUse option to enable aggregation pipeline stages to write 
							data to temporary files. Keep in mind that allowDiskUse will store the data into the disk rather than the memory, 
							which might result in slower performance.

=>The db.aggregate() command can return either a cursor or store the results in a collection. 
	When returning a cursor or storing the results in a collection, each document in the result set is subject to the BSON Document Size limit,
	 currently 16 megabytes; if any single document exceeds the BSON Document Size limit, the command will produce an error.
If you have multiple stages in your pipeline, it’s always better to understand the overhead associated with each stage. For instance,
if you have both $sort and $match stage in your pipeline, it’s highly recommended that you use a $match before $sort in order to minimize 
the documents that need to be sorted.



in mongoose
﻿



Function
:
$addFields
Adds new fields to documents. $addFields outputs documents that contain all existing fields from the input documents and newly added fields.

$bucket
Categorizes incoming documents into groups, called buckets, based on a specified expression and bucket boundaries and outputs a document 
per each bucket. Each output document contains an _id field whose value specifies the inclusive lower bound of the bucket. The output option 
specifies the fields included in each output document.



=>What is the role of a sharding key in MongoDB?
			A sharding key determines how data is distributed across multiple shards (database partitions) in a sharded cluster.
			MongoDB uses a field in the document to decide which shard should store the document. Choosing an appropriate sharding key is 
			crucial for even data distribution and efficient queries.

=>How does MongoDB handle transactions?
						MongoDB introduced multi-document transactions in version 4.0, allowing you to perform ACID-compliant transactions. 
						Transactions ensure that a series of operations succeeds or fails, maintaining data consistency.
						MongoDB supports various indexes, including single-field indexes, compound indexes, geospatial indexes, 
						text indexes, hashed indexes, and wildcard indexes.

GridFS represents a MongoDB standard designed to handle storing and retrieving substantial files, such as images, videos, and binary data. This approach involves breaking down large files into smaller segments and then saving them as individual documents within collections. This method enables the efficient handling, retrieval, and administration of such files.
virtual  property
=>In Mongoose, a virtual is a property that is not stored in MongoDB.
	Virtuals are typically used for computed properties on documents.
	https://mongoosejs.com/docs/tutorials/virtuals.html
	Suppose you have a User model. Every user has an email, but you also want the email's domain. 
	For example, the domain portion of 'test@gmail.com' is 'gmail.com'.

				Below is one way to implement the domain property using a virtual.
				You define virtuals on a schema using the Schema#virtual() function.

				const userSchema = mongoose.Schema({
				  email: String
				});
				// Create a virtual property `domain` that's computed from `email`.
				userSchema.virtual('domain').get(function() {
				  return this.email.slice(this.email.indexOf('@') + 1);
				});
				const User = mongoose.model('User', userSchema);

				const doc = await User.create({ email: 'test@gmail.com' });
				// `domain` is now a property on User documents.
				doc.domain; // 'gmail.com'
				
							const userSchema = mongoose.Schema({
			  firstName: String,
			  lastName: String
			});
			// Create a virtual property `fullName` with a getter and setter.
			userSchema.virtual('fullName').
			  get(function() { return `${this.firstName} ${this.lastName}`; }).
			  set(function(v) {
				// `v` is the value being set, so use the value to set
				// `firstName` and `lastName`.
				const firstName = v.substring(0, v.indexOf(' '));
				const lastName = v.substring(v.indexOf(' ') + 1);
				this.set({ firstName, lastName });
			  });
			const User = mongoose.model('User', userSchema);

			const doc = new User();
			// Vanilla JavaScript assignment triggers the setter
			doc.fullName = 'Jean-Luc Picard';

			doc.fullName; // 'Jean-Luc Picard'
			doc.firstName; // 'Jean-Luc'
			doc.lastName; // 'Picard'
=> Middleware
Mongoose has 4 types of middleware: document middleware, model middleware, aggregate middleware, and query middleware.
1Doument Middleware => it will point document
// pre: Before saving document => call when we excute .save() or  .create() method
// post:After Sving Document

Document middleware is supported for the following document functions. In Mongoose, 
a document is an instance of a Model class. In document middleware functions, this refers to the document. 
To access the model, use this.constructor.

validate
save
remove
updateOne
deleteOne
init (note: init hooks are synchronous)

2 Query Middleware =>it will point query
call when we beffore of excute .find() 


Query middleware is supported for the following Query functions. 
Query middleware executes when you call exec() or then() on a Query object, or await on a Query object. In query middleware functions, 
this refers to the query.

count
countDocuments
deleteMany
deleteOne
estimatedDocumentCount
find
findOne
findOneAndDelete
findOneAndReplace
findOneAndUpdate
remove
replaceOne
updateOne
updateMany
validate


3 Aggrigation middleware  => Before and after aggrigation happen
Aggregate middleware is for MyModel.aggregate(). Aggregate middleware executes when you call exec() on an aggregate object.
 In aggregate middleware, this refers to the aggregation object.

aggregate

4 Model middleware
Model middleware is supported for the following model functions. Don't confuse model middleware and document middleware: model middleware hooks into static functions on a Model class, document middleware hooks into methods on a Model class. In model middleware functions, this refers to the model.

bulkWrite
createCollection
insertMany

Here are the possible strings that can be passed to pre()

aggregate
bulkWrite
count
countDocuments
createCollection
deleteOne
deleteMany
estimatedDocumentCount
find
findOne
findOneAndDelete
findOneAndReplace
findOneAndUpdate
init
insertMany
remove
replaceOne
save
update
updateOne
updateMany
validate


Use Cases
Middleware are useful for atomizing model logic. Here are some other ideas:

complex validation
removing dependent documents (removing a user removes all their blogposts)
asynchronous defaults
asynchronous tasks that a certain action triggers

			
=>Populate()

// Creating Schemas
const userSchema = new mongoose.Schema({
    username: String,
    email: String
})
 
const postSchema = new mongoose.Schema({
    title: String,
    postedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User"
    }
})
 
// Creating models from userSchema and postSchema
const User = mongoose.model('User', userSchema);
const Post = mongoose.model('Post', postSchema);


Post.find()
.populate("postedBy")
.then(p=>console.log(p))
.catch(error=>console.log(error));

We will perform the query to find all the posts using populate() method.
 To overcome the above problem, populate() method is used to replace the user ObjectId field with the whole document consisting of all the user data. 
For this we only have to replace the query part in the above code in main.js file with:
Note: In the argument of the populate() method we pass the field we want to populate with the user data.



https://www.simplilearn.com/mongodb-interview-questions-and-answers-article	
	
	

	
	
	
	
	